[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

const float PI=3.1415926536;
const float TAU=6.2831853072;

float sstep(float edge, float x) {
	return smoothstep(edge-0.001, edge+0.001, x);
}

float stroke(float x, float s, float w) {
	float d = sstep(s, x + w/2.0) - sstep(s, x - w/2.0);
	return clamp(d, 0.0, 1.0);
}

float circle(vec2 st) {
	return length(st-vec2(0.5))*2.0;
}

float fill(float x, float size) {
	return 1.0 - sstep(size, x);
}

float rect(vec2 st, vec2 s) {
	st = st*2.0 - 1.0;
	return max(abs(st.x/s.x), abs(st.y/s.y));
}

float rect_cross(vec2 st, float s) {
	vec2 size = vec2(0.25, s);
	return min(rect(st, size.xy), rect(st, size.yx));
}

float flip(float v, float pct) {
	return mix(v, 1.0-v, pct);
}

float vesica(vec2 st, float w) {
	vec2 offset = vec2(w*0.5, 0);
	return max(circle(st+offset), circle(st-offset));
}

float tri(vec2 st) {
	st = (st*2.0 - 1.0)*2.0;
	return max(abs(st.x*0.866)+0.5*st.y, -0.5*st.y);
}

float rhomb(vec2 st) {
	return max(tri(st), tri(vec2(st.x, 1.0-st.y)));
}

vec2 rotate(vec2 st, float a) {
	st = st - 0.5;
	return vec2(cos(a)*st.x - sin(a)*st.y, sin(a)*st.x + cos(a)*st.y) + 0.5;
}

float polygon(vec2 st, int V) {
    st = st * 2.0 - 1.0;
    float a = atan(st.x, st.y) + PI;
    float r = length(st);
    float v = TAU / float(V);
    return cos(floor(0.5+a/v)*v - a)*r;
}

float hex(vec2 st) {
    st = abs(st * 2.0 - 1.0);
    return max(st.x*0.866025 + st.y*0.5, st.y);
}

float star(vec2 st, int V, float s) { // 没搞懂原理
    st = st * 4.0 - 2.0;
    float a = atan(st.y, st.x) / TAU;
    float seg = a * float(V);
    a = ((floor(seg) + 0.5)/float(V) + mix(s, -s, step(0.5, fract(seg))))*TAU;
    return abs(dot(vec2(cos(a), sin(a)), st));
}

float rays(vec2 st, int N) {
    st -= 0.5;
    return fract(atan(st.y, st.x)/TAU * float(N));
}

float heart(vec2 st, float size) {
	st -= vec2(0.5, 0.8);
    float r = length(st) * 5.0;
    st = normalize(st);
    return r - ((st.y*pow(abs(st.x), 0.67))/(st.y + 1.5) - 2.0*st.y + 1.26);
}

float bridge(float c, float d, float s, float w) {
    c *= 1.0 - stroke(d, s, w * 2.0);
    return c + stroke(d, s, w);
}

vec2 scale(vec2 st, vec2 scalar) {
	return (st - 0.5)*scalar + 0.5;
}

float spiral(vec2 st, float t) {
    st -= 0.5;
    float r = dot(st, st);
    float a = atan(st.y, st.x);
    return abs(sin(fract(log(r) * t + a * 0.159)));
}

float flower(vec2 st, int N) {
    st = st * 2.0 - 1.0;
    float r = length(st) * 2.0;
    float a = atan(st.y, st.x);
    float v = float(N) * 0.5;
    return 1.0 - (abs(cos(a * v)) * 0.5 + 0.5) / r;
}

float draw(vec2 st, vec2 tile_xy, vec2 count) {
	int show_id = int(tile_xy.x + (tile_xy.y * count.x));
    float color = 0.0;
	st.y = 1.0-st.y;
	switch(show_id) {
		case 0: { // void
			color = 0.0;
			break;
		}
		case 1: { // justice
			color = sstep(0.5, st.x);
			break;
		}
		case 2: { // strength
			color = sstep(cos(st.y*PI)*0.25+0.5, st.x);
			break;
		}
		case 3: { // death
			color = sstep(1.0-st.y, st.x);
			break;
		}
		case 4: { // wall
			color = stroke(st.x, 0.5, 0.2);
			break;
		}
		case 5: { // temperance
			float offset = cos(st.y*PI)*0.15;
			color = stroke(st.x, 0.3+offset, 0.1) + stroke(st.x, 0.5+offset, 0.1) + stroke(st.x, 0.7+offset, 0.1);
			break;
		}
		case 6: { // branch
			float offset = st.y;
			color = stroke(st.x, offset, 0.15);
			break;
		}
		case 7: { // the hanged man
			float offset = st.y;
			color = stroke(st.x, offset, 0.15);
			offset = 1.0-st.y;
			color += stroke(st.x, offset, 0.15);
			break;
		}
		case 8: { // the high priestess
			color = stroke(circle(st), 0.5, 0.05);
			break;
		}
		case 9: { // moon
			color = fill(circle(st), 0.65) - fill(circle(st-vec2(0.1, 0.05)), 0.5);
			break;
		}
		case 10: { // emperor
			color = fill(rect(st, vec2(1.0)), 0.1) + stroke(rect(st, vec2(1.0)), 0.5, 0.1);
			break;
		}
		case 11: { // the hierophant
			float sdf = rect(st, vec2(1.0));
			color = fill(sdf, 0.5);
			float cross_sdf = rect_cross(st, 1.0);
			color *= sstep(0.5, fract(cross_sdf*4.0));
			color *= sstep(1.0, cross_sdf);
			color += stroke(sdf, 0.65, 0.05);
			color += stroke(sdf, 0.75, 0.025);
			color += fill(cross_sdf, 0.45);
			break;
		}
		case 12: { // the tower
			float sdf = fill(rect(st, vec2(0.4, 0.7)), 1.0);
			color = flip(sdf, stroke(st.x, 1.0-st.y, 0.03));
			break;
		}
		case 13: { // merge
			color = fill(circle(st-vec2(0.15, 0.0)), 0.5);
			color = flip(color, stroke(circle(st+vec2(0.15, 0.0)), 0.5, 0.05));
			break;
		}
		case 14: { // hope
			color = fill(vesica(st, 0.2), 0.5);
			color = flip(color, sstep(st.y+st.x, 1.0));
			break;
		}
		case 15: { //the temple
			color = fill(tri(vec2(st.x, 1.0-st.y)), 0.7);
			color = flip(color, fill(tri(st-vec2(0.0, 0.175)), 0.35));
			break;
		}
		case 16: { // the summit
			float sdf = tri(st+vec2(0, 0.1));
			color = stroke(circle(st-vec2(0, 0.1)), 0.5, 0.1);
			color *= sstep(0.7, sdf);
			color += fill(sdf, 0.5);
			break;
		}
		case 17: { // the diamond
			float sdf = rhomb(st);
			color = sstep(fract(sdf*8.0), 0.5);
			color *= sstep(rhomb(st), 0.8);
			color += sstep(sdf, 0.5);
			break;
		}
		case 18: { // the hermit
			color = fill(tri(st), 0.6);
			color = flip(color, fill(rhomb(st), 0.45));
			break;
		}
		case 19: { // intuition
			st = rotate(st, PI/4.0);
			float sdf = tri(st);
			sdf /= tri(st+vec2(0, 0.2));
			color = fill(sdf, 0.55);
			break;
		}
		case 20: { // the stone
			st = rotate(st, PI/4.0);
			color = fill(rect(st, vec2(1.0)), 0.5);
			color *= 1.0 - stroke(st.x, 0.5, 0.05);
			color *= 1.0 - stroke(st.y, 0.5, 0.05);
			break;
		}
		case 21: { // the mountain
			st = rotate(st, PI/4.0);
			vec2 offset = vec2(0.15);
			color += fill(rect(st+offset, vec2(1.0)), 0.2);
			color += fill(rect(st-offset, vec2(1.0)), 0.2);
			color *= sstep(0.35, rect(st, vec2(1.0)));
			color += fill(rect(st, vec2(1.0)), 0.3);
			break;
		}
		case 22: { // the shadow
			st = rotate(st, PI/4.0);
			vec2 offset = vec2(-0.05, +0.05);
			color = fill(rect(st+offset, vec2(1.0)), 0.5);
			color = max(fill(rect(st-offset, vec2(1.0)), 0.5), color);
			color -= fill(rect(st-offset, vec2(1.0)), 0.45);
			break;
		}
		case 23: { // opposite
			st = rotate(st, PI/4.0);
			vec2 offset = vec2(0.07);
			color = fill(rect(st+offset, vec2(1.0)), 0.5);
			color = flip(color, sstep(rect(st-offset, vec2(1.0)), 0.5));
			break;
		}
		case 24: { // the oak
			st = rotate(st, PI/4.0);
			color = stroke(rect(st, vec2(1.0)), 0.5, 0.1);
			color += stroke(rect(st-vec2(0.125, -0.125), vec2(1.0)), 0.25, 0.1);
			color *= sstep(0.35, rect(st-vec2(0.2, -0.2), vec2(1.0)));
			color += stroke(rect(st-vec2(0.175, -0.175), vec2(1.0)), 0.15, 0.1);
			break;
		}
		case 25: { // ripples
			st = rotate(st, PI/4.0);
			vec2 offsets[] = {vec2(-0.09), vec2(-0.03), vec2(0.03), vec2(0.09)};
			for(int i = 0; i < 4; ++i) {
				color += stroke(rect(st-offsets[i], vec2(1.0)), 0.25, 0.05);
			}
			break;
		}
		case 26: { // the empress
			float p1 = polygon(st, 5);
			float p2 = polygon(vec2(st.x, 1.0-st.y), 5);
			color = fill(p1, 0.75) * fill(fract(p1*5.0), 0.5);
			color -= fill(p1, 0.6) * fill(fract(p2*4.9), 0.45);
			break;
		}
		case 27: { // bundle
			st = rotate(st, PI/2.0);
			color = stroke(hex(st), 0.6, 0.1);
			color += fill(hex(st+vec2(0.1, 0)), 0.12);
			color += fill(hex(st+vec2(-0.05, 0.086)), 0.12);
			color += fill(hex(st+vec2(-0.05, -0.086)), 0.12);
			break;
		}
		case 28: { // the devil
			color = stroke(circle(st), 0.7, 0.1);
			color *= sstep(0.7, star(st.yx, 5, 0.3));
			color += stroke(star(st.yx, 5, 0.3), 0.35, 0.1);
			break;
		}
		case 29: { // the sun
			color = fill(star(rotate(st, radians(22.5)), 8, 0.1), 1.0);
			color += fill(star(st, 8, 0.1), 1.1);
			vec2 offset = vec2(0, -0.27);
			for(int i = 0; i < 8; ++i) {
				color *= flip(stroke(polygon(rotate(st, radians(float(i)*45.0))+offset, 3), 0.25, 0.04), 1.0);
			}
			color *= flip(stroke(polygon(st, 8), 0.125, 0.04), 1.0);
			break;
		}
		case 30: { // the star
			color = stroke(rays(st, 8), 0.5, 0.15);
			st = rotate(st, radians(30.0));
			color *= sstep(0.6, star(st, 6, 0.083));
			color += fill(star(st, 6, 0.083), 0.5);
			color *= sstep(0.45, star(st, 6, 0.083));
			color += fill(star(st, 6, 0.083), 0.4);
			color -= stroke(star(rotate(st, radians(-30.0)), 6, 0.083), 0.21, 0.05);
			break;
		}
		case 31: { // judgement
			color = stroke(rays(st, 28), 0.5, 0.15);
			color = flip(color, sstep(st.y, 0.5));
			color *= sstep(0.2, rect(st, vec2(1.0)));
			color += fill(rect(st, vec2(1.0)), 0.15);
			break;
		}
		case 32: { // wheel of fortune
			color = stroke(rays(st, 8), 0.5, 0.2);
			color *= fill(polygon(st, 8), 0.5);
			color += stroke(polygon(st, 8), 0.6, 0.1);
			color = min(color, sstep(0.25, polygon(st, 8)));
			color += stroke(polygon(st, 8), 0.2, 0.05);
			break;
		}
		case 33: { // vision	
			st = rotate(st, PI/2.0);
			vec2 offset = vec2(-0.05, 0.0);
			color += stroke(vesica(st+offset, 0.5), 0.83, 0.05);
			color *= sstep(0.81, vesica(st+offset, 0.5));
			color += stroke(circle(st), 0.3, 0.05);
			color *= fill(vesica(st+offset, 0.5), 0.85);
			st = rotate(st, -PI/2.0);
			color += sstep(vesica(st, 0.3), sstep(0.83, vesica(rotate(st, PI/2.0)+offset, 0.5)) * stroke(rays(st, 50), 0.2, 0.2));
			break;
		}
		case 34: { // the lovers
			color = fill(heart(st, 0.5), 0.1);
			color -= stroke(polygon(st, 3), 0.12, 0.04);
			break;
		}
		case 35: { // the magician
			st.x = flip(st.x, step(0.5, st.y));
			color = stroke(circle(st+vec2(0.15, 0)), 0.4, 0.06);
			color = bridge(color, circle(st-vec2(0.15, 0)), 0.4, 0.06);
			break;
		}
		case 36: { // the link
			st.y = flip(st.y, step(0.5, st.x));
			color = stroke(rect(rotate(st-vec2(0, 0.1), PI/4.0), vec2(1.0)), 0.3, 0.1);
			color = bridge(color, rect(rotate(st+vec2(0, 0.1), PI/4.0), vec2(1.0)), 0.3, 0.1);
			color += fill(rhomb(abs(st-vec2(0.0, 0.5))), 0.1);
			break;
		}
		case 37: { // holding together
			st.x = flip(st.x, step(0.5, st.y));
			float size = 0.098;
			color = stroke(rect(rotate(st-vec2(0.05, 0), PI/4.0), vec2(1.0)), 0.144, size);
			color = bridge(color, rect(rotate(st+vec2(0.05, 0), PI/4.0), vec2(1.0)), 0.144, size);
			break;
		}
		case 38: { // the chariot
			float r1 = rect(st, vec2(1.0));
			float r2 = rect(rotate(st, PI/4.0), vec2(1.0));
			float inv = step(1.0, (st.x+st.y));
			inv = flip(inv, step(st.y, st.x));
			color = stroke(r1, 0.5, 0.1) + stroke(r2, 0.5, 0.1);
			float bridges = mix(r1, r2, inv);
			color = bridge(color, bridges, 0.5, 0.1);
			break;
		}
		case 39: { // the loop
			float inv = step(.5, st.y);
	        st = rotate(st, PI/4.0) - .2;
	        st = mix(st, 0.6 - st, inv);
	        for (int i = 0; i < 5; i++) {
	            float r = rect(st, vec2(1.));
	            float s = .25;
	            s -= abs(float(i)*0.1 - 0.2);
	            color = bridge(color, r, s, 0.05);
	            st += 0.1;
	        }
			break;
		}
		case 40: { // turning point
			st = rotate(st, PI/3.0);
	        st.y = flip(st.y, step(0.5, st.x));
	        st.y += .25;
	        float down = polygon(st, 3);
	        float top = polygon(vec2(st.x, 1.5-st.y), 3);
	        color = stroke(top, 0.4, 0.15);
	        color = bridge(color, down, 0.4, 0.15);
	        break;
		}
		case 41: { // trinity
			st = vec2(st.x, 1.0-st.y);
			float t1 = polygon(st+vec2(0.0, 0.15), 3);
			float t2 = polygon(st+vec2(0.15, -0.1), 3);
			float t3 = polygon(st+vec2(-0.15, -0.1), 3);
			color = stroke(t1, 0.3, 0.1) + stroke(t2, 0.3, 0.1) + stroke(t3, 0.3, 0.1);
			float bridges = mix(mix(t1, t2, step(0.5, st.y)), mix(t3, t2, step(0.5, st.y)), step(0.5, st.x));
			color = bridge(color, bridges, 0.3, 0.1);
			break;
		}
		case 42: { // cauldron
			float n = 12.0;
	        float a = TAU/n;
	        for (float i = 0.0; i < n; i++) {
	            vec2 xy = rotate(st, a * i);
				xy.y -= 0.2;
	            float vsc = vesica(xy, 0.3);
	            color *= flip(stroke(vsc, 0.45, 0.1)*step(0.5, xy.y), 1.0);
	            color += stroke(vsc, .45, .05);
	        }
			break;
		}
		case 43: { // the elders
			float n = 3.0;
	        float a = TAU/n;
	        for (float i = 0.0; i < n*2.0; i++) {
	            vec2 xy = rotate(st, a * i);
				xy.y -= 0.1;
	            float vsc = vesica(xy, 0.3);
	            color = mix(
                	color + stroke(vsc, 0.5, 0.1), mix(color, bridge(color, vsc, 0.5, 0.1), step(xy.x, .5) - step(xy.y, .4)),
                	step(3.0, i)
            	);
	        }
			break;
		}
		case 44: { // the core
			float sdf = star(st, 8, 0.063);
			color = fill(sdf, 1.22);
			float N = 8.0;
			for(float i = 0.0; i < N; ++i) {
				vec2 xy = rotate(st, PI/8.0 + i*TAU/N);
				xy = scale(xy, vec2(1.0, 0.72));
				xy.y -= 0.125;
				color -= fill(rhomb(xy), 0.23);
			}
			break;
		}
		case 45: { // inner truth
			st -= 0.5;
	        float r = length(st)*length(st);
	        float a = atan(st.y, st.x) / PI;
	        vec2 uv = vec2(a, r);
	        vec2 grid = vec2(5.0, log(r) * 20.0);
	        vec2 uv_i = floor(uv * grid);
	        uv.x += .5 * mod(uv_i.y, 2.);
	        vec2 uv_f = fract(uv * grid);
	        float shape = rhomb(uv_f);
	        color += fill(shape, 0.9) * step(0.75, 1.0 - r);
	        break;
		}
		case 46: { // the world
			color += fill(flower(st, 5), 0.2);
			color = clamp(color-step(.95, star(rotate(st, 0.6), 5, .1)), 0, 1);
			color += stroke(circle(st), 0.8, 0.05);
			color -= stroke(circle(st), 0.1, 0.03);
			break;
		}
		case 47: { // the fool
			color = spiral(st, 0.1);
			color = sstep(0.5, color);
			break;
		}
		case 48: { // elements
			color = fill(flower(rotate(st, PI/6.0), 3), 0.2);
			color += stroke(circle(st), 0.8, 0.05);
			color -= fill(tri(rotate(st, PI)), 0.1);
			break;
		}
		case 49: { // enlightment
			color = 1.0;
			break;
		}
	}
	return color;
}

void fragment() {   
    vec2 count = vec2(10, 5);
    vec2 tile_xy = floor(UV * count);
    vec2 st = vec2(UV.x * count.x - tile_xy.x, UV.y * count.y - tile_xy.y);

    vec2 grids = clamp(cos(UV*TAU*count)*10.0-9.8, 0.0, 1.0); // ---^---^---
    float grid = max(grids.x, grids.y);
    
    float color = draw(st, tile_xy, count);
    color = clamp(color + grid, 0.0, 1.0);
    
    COLOR = vec4(vec3(color), 1);
}"

[resource]
shader = SubResource( 1 )
