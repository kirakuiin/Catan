[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

const float PI=3.1415926536;
const float TAU=6.2831853072;

float sstep(float edge, float x) {
	return smoothstep(edge-0.001, edge+0.001, x);
}

float stroke(float x, float s, float w) {
    return sstep(s-w/2.0, x) - sstep(s+w/2.0, x);
}

float circle(vec2 ft) {
    return length(ft-0.5)*2.0;
}

float fill(float x, float size) {
    return 1.0 - sstep(size, x);
}

float rect(vec2 st, vec2 size) {
    st = st*2.0 - 1.0;
    return max(abs(st.x/size.x), abs(st.y/size.y));
}

float rect_cross(vec2 st, float h) {
    vec2 size = vec2(0.25, h);
    return min(rect(st, size.xy), rect(st, size.yx));
}

float flip(float color, float pct) {
    return mix(color, 1.0-color, pct);
}

float vesica(vec2 st, float w) {
    vec2 offset = vec2(w*0.5, 0);
    return max(circle(st+offset), circle(st-offset));
}

float tri(vec2 st) {
    st = (st*2.0 - 1.0)*2.0;
    return max(st.y*0.5 + abs(0.866*st.x), st.y*-0.5);
}

float rhomb(vec2 st) {
    return max(tri(st), tri(vec2(st.x, 1.0-st.y)));
}

vec2 rotate(vec2 st, float a) {
    st -= 0.5;
    return mat2(vec2(cos(a), sin(a)), vec2(-sin(a), cos(a))) * st + 0.5;
}

float polygon(vec2 st, int V) {
    st = st*2.0 - 1.0;
    float a = atan(st.x, st.y) + PI;
    float p = length(st);
    float v = TAU/float(V);
    return cos(floor(0.5+a/v)*v - a)*p;
    st = st * 2.0 - 1.0;
}

float star(vec2 st, int V, float s) {
    st = st * 4.0 - 2.0;
    float a = atan(st.y, st.x) / TAU;
    float seg = a * float(V);
    a = ((floor(seg) + 0.5)/float(V) + mix(s, -s, step(0.5, fract(seg))))*TAU;
    return abs(dot(vec2(cos(a), sin(a)), st));
}

float rays(vec2 st, int N) {
    st = st*2.0-1.0;
    float a = fract(atan(st.y, st.x)/TAU*float(N));
    return a;
}

float draw(vec2 st, vec2 tile_xy, vec2 count) {
	int show_id = int(tile_xy.x + (tile_xy.y * count.x));
    float color = 0.0;
	st.y = 1.0-st.y;
	switch(show_id) {
		case 0: { // void
			color = 0.0;
			break;
		}
		case 1: { // justice
            color = 1.0 - sstep(0.5, st.x);
			break;
		}
		case 2: { // strength
            color = sstep(cos(st.y*PI)/4.0+0.5, st.x);
			break;
		}
		case 3: { // death
            color = sstep(1.0-st.y, st.x);
			break;
		}
		case 4: { // wall
			color = stroke(st.x, 0.5, 0.2);
            break;
		}
		case 5: { // temperance
			float sdf = cos(st.y*PI)*0.1+0.5;
            color = stroke(st.x, sdf-0.25, 0.1);
            color += stroke(st.x, sdf, 0.1);
            color += stroke(st.x, sdf+0.25, 0.1);
            break;
		}
		case 6: { // branch
			color = stroke(st.x, st.y, 0.2);
            break;
		}
		case 7: { // the hanged man
            color = stroke(st.x, st.y, 0.2);
			color += stroke(st.x, 1.0-st.y, 0.2);
            break;
		}
		case 8: { // the high priestess
            color = stroke(circle(st), 0.5, 0.1);
			break;
		}
		case 9: { // moon
            color = fill(circle(st), 0.65);
            color -= fill(circle(st-0.1), 0.5);
			break;
		}
		case 10: { // emperor
			color = fill(rect(st, vec2(1.0)), 0.1);
            color += stroke(rect(st, vec2(1.0)), 0.5, 0.1);
            break;
		}
		case 11: { // the hierophant
            float sdf = rect_cross(st, 1.0);
            color = sstep(fract(sdf*4.0), 0.4);
            color *= sstep(rect(st, vec2(1.0)), 0.45);
            color *= sstep(1.0, sdf);
            color += stroke(rect(st, vec2(1.0)), 0.65, 0.05);
            color += stroke(rect(st, vec2(1.0)), 0.75, 0.025);
            color += fill(sdf, 0.45);
            break;
		}
		case 12: { // the tower
            color += fill(rect(st, vec2(0.4, 0.6)), 1.0);
            color = flip(color, stroke(abs(st.x+st.y), 1.0, 0.05));
			break;
		}
		case 13: { // merge
            color = flip(fill(circle(st-vec2(0.15, 0)), 0.5), stroke(circle(st+vec2(0.15, 0)), 0.5, 0.05));
			break;
		}
        case 14: { // hope
            color = flip(fill(vesica(st, 0.3), 0.6), sstep(st.x+st.y, 1.0));
            break;
        }
        case 15: {
            color = fill(tri(vec2(st.x, 1.0-st.y)), 0.6);
            color -= fill(tri(st-vec2(0.0, 0.15)), 0.3);
            break;
        }
        case 16: {
            color = stroke(circle(st-vec2(0, 0.1)), 0.4, 0.05);
            color *= sstep(0.4, tri(st));
            color += fill(tri(st+vec2(0, 0.1)), 0.5);
            break; 
        }
        case 17: {
            color = fill(rhomb(st), 0.5);
            color += stroke(rhomb(st), 0.6, 0.05);
            color += stroke(rhomb(st), 0.7, 0.05);
            break;
        }
        case 18: {
            color = fill(tri(st), 0.5);
            color -= fill(rhomb(st), 0.35);
            break;
        }
        case 19: {
            st = rotate(st, PI/4.0);
            color = fill(tri(st), 0.5);
            color -= fill(rhomb(rotate(st+vec2(0, 0.25), PI/2.0)), 0.6);
            break;
        }
        case 20: {
            st = rotate(st, PI/4.0);
            color = fill(rect(st, vec2(1.0)), 0.5);
            color *= sstep(stroke(0.5, st.x, 0.05), 0.5);
            color *= sstep(stroke(0.5, st.y, 0.05), 0.5);
            break;
        }
        case 21: {
            vec2 offset = vec2(0.15);
            st = rotate(st, PI/4.0);
            color = fill(rect(st+offset, vec2(1.0)), 0.2);
            color += fill(rect(st-offset, vec2(1.0)), 0.2);
            color *= flip(fill(rect(st, vec2(1.0)), 0.4), 1.0);
            color += fill(rect(st, vec2(1.0)), 0.35);
            break;
        }
        case 22: {
            st = rotate(st, PI/4.0);
            vec2 offset = vec2(-0.05, 0.05);
            color = fill(rect(st+offset, vec2(1.0)), 0.4);
            color += fill(rect(st-offset, vec2(1.0)), 0.4);
            color *= flip(fill(rect(st-offset, vec2(1.0)), 0.35), 1.0);
            break;
        }
        case 23: {
            vec2 offset = vec2(0.08);
            st = rotate(st, PI/4.0);
            color = fill(rect(st+offset, vec2(1.0)), 0.4);
            color = flip(color, fill(rect(st-offset, vec2(1.0)), 0.4));
            break;
        }
        case 24: {
            st = rotate(st, PI/4.0);
            color = stroke(rect(st, vec2(1.0)), 0.5, 0.08);
            color += stroke(rect(st-vec2(0.12, -0.12), vec2(1.0)), 0.25, 0.08);
            color *= flip(fill(rect(st-vec2(0.165, -0.165), vec2(1.0)), 0.3), 1.0);
            color += stroke(rect(st-vec2(0.18, -0.18), vec2(1.0)), 0.15, 0.08);
            break;
        }
        case 25: {
            st = rotate(st, PI/4.0);
            st += vec2(0.12);
            vec2 offset = vec2(-0.08);
            for(int i = 0; i < 4; i++) {
                color += stroke(rect(st+offset*float(i), vec2(1.0)), 0.3, 0.05);
            }
            break;
        }
        case 26: {
            float p1 = polygon(st, 5);
            float p2 = polygon(vec2(st.x, 1.0-st.y), 5);
            color = fill(p1, 0.7) * fill(fract(p1*5.0), 0.5);
            color -= fill(p2, 0.6) * fill(fract(p2*4.9), 0.4);
            break;
        }
        case 27: {
            float hex = polygon(rotate(st, PI/6.0), 6);
            color = stroke(hex, 0.6, 0.07);
            color += fill(polygon(rotate(st+vec2(0.06), PI/6.0), 6), 0.1);
            color += fill(polygon(rotate(st+vec2(-0.06, 0.06), PI/6.0), 6), 0.1);
            color += fill(polygon(rotate(st+vec2(0, -0.045), PI/6.0), 6), 0.1);
            break;
        }
        case 28: {
            color = stroke(circle(st), 0.7, 0.07);
            color *= sstep(0.6, star(1.0-st.yx, 5, 0.1));
            color += stroke(star(1.0-st.yx, 5, 0.1), 0.3, 0.1);
            break;
        }
        case 29: {
            color = fill(star(st, 8, 0.1), 1.0);
            color = max(color, fill(star(rotate(st, PI/8.0), 8, 0.1), 0.9));
            vec2 offset = vec2(0.0, 0.24);
            for(int i=0; i < 8; ++i) {
                color -= stroke(polygon(rotate(st, float(i)*PI/4.0)-offset, 3), 0.25, 0.04);
            }
            color -= stroke(polygon(st, 8), 0.1, 0.05);
            break;
        }
        case 30: {
            color = stroke(rays(st, 8), 0.5, 0.15);
            color *= sstep(0.6, star(st.yx, 6, 0.08));
            color += fill(star(st.yx, 6, 0.085), 0.5);
            color -= stroke(star(st.yx, 6, 0.085), 0.45, 0.05);
            color -= stroke(star(st, 6, 0.085), 0.23, 0.05);
            break;
        }
        case 31: {
            color = stroke(rays(st, 28), 0.5, 0.2);
            color = flip(color, sstep(st.y, 0.5));
            color += sstep(rect(st, vec2(1.0)), 0.2);
            color *= flip(stroke(rect(st, vec2(1.0)), 0.18, 0.04), 1.0);
            break;
        }
        case 32: {
            float oct = polygon(st, 8);
            color = stroke(rays(st, 8), 0.5, 0.2) * sstep(oct, 0.5) * sstep(0.2, oct);
            color += stroke(oct, 0.6, 0.05);
            color += stroke(oct, 0.14, 0.05);
            break;
        }
	}
	return color;
}

void fragment() {   
    vec2 count = vec2(10, 5);
    vec2 tile_xy = floor(UV * count);
    vec2 st = vec2(UV.x * count.x - tile_xy.x, UV.y * count.y - tile_xy.y);

    vec2 grids = clamp(cos(UV*TAU*count)*10.0-9.8, 0.0, 1.0); // ---^---^---
    float grid = max(grids.x, grids.y);
    
    float color = draw(st, tile_xy, count);
    color = clamp(color + grid, 0.0, 1.0);
    
    COLOR = vec4(vec3(color), 1);
}"

[resource]
shader = SubResource( 1 )
